Этапы обработки программы:
 - проверка синтаксических ошибок
 - применение директив и операций препроцессора
 - проверка синтаксических ошибок (2?)
 - парсинг исходного кода с интерпритацией сахара
 - проверка синтаксических ошибок (3?) 
 - преобразование в эквивалентный ассемблерный код

Предварительное распределение обязанностей:
 - препроцессор/парсинг - Никита и Тимур
 - преобразование - Амир и Артур
 - тестирование   - Айдар

Примерный алгоритм работы компилятора:
1. Берем исходный код, суем его в препроцессор, он возвращает новый исходный код:
 a) делаем инклуды, дефайны, проверки на дефайны и прочие тупые команды препроцессора
 б) чекаем на синтаксические ошибки
2. Берем новых исходный код, суем его в парсер, парсер возвращает массив строк-объектов, где строка-объект - это:
 a) выражение*
 б) for/if/while
 в) объявление функции/переменной/структуры
 г) фигурная скобка
 д) мб еще что...
3. Запиливатель ассемблерного кода берет этот массив строк и делает, не поверите, ассемблерный код.
4. yasm <наш ассемблерный код>
5. ???
6. PROFIT.

Параллельно Айдар пилит тесты на все, что можно, с целью сбережения нервов всей команды.

* Что такое выражение?
Ну это переменные, вызовы функций, унарные(не забыть про касты, разыменовывание, получение указателя, доступ к методам и членам объекта) и бинарные операторы, контанты.
